#!/usr/bin/env node
'use strict';

const { program } = require('commander');
const fs = require('fs');
const fsPromises = fs.promises;
const os = require('os');
const glob = require('glob');
const axios = require('axios').default;

async function findRegex (fp, findRegexStr, replRegexStr, insensitive, dryRun) {
  const fContent = await fsPromises.readFile(fp, 'utf8');
  // buffer to write out, if replRegexStr is specified
  const fBuffer = [];
  // The regex to match
  const findRe = new RegExp(findRegexStr, (insensitive ? 'ig' : 'g'));
  // flag shortcut to represent if we actually need to writeout to a file
  const bWriteOut = replRegexStr && !dryRun;

  fContent.split(/\r?\n/).forEach((lContent, lNum) => {
    if (!findRe.test(lContent)) {
      // no match of `findRe`
      if (bWriteOut) fBuffer.push(lContent);
      return;
    }
    // Line content matches findRe
    console.log(`${fp}:${lNum}: ${lContent}`);

    const newLContent = replRegexStr ? lContent.replaceAll(findRe, replRegexStr) : lContent;
    if (dryRun) console.log(`  â†³ ${newLContent}`);
    if (bWriteOut) fBuffer.push(newLContent);
  });

  // write back to the filepath if replacement is needed
  if (bWriteOut) fsPromises.writeFile(fp, fBuffer.join(os.EOL));
}

async function findUrls (file) {
  const fContent = await fsPromises.readFile(file, 'utf8');
  // regex from SO: https://stackoverflow.com/a/3809435/523060
  const findRe = /https?:\/\/[-a-zA-Z0-9@:%_+.~#?&//=]+/ig;

  return fContent.split(/\r?\n/).map((lContent, lineNum) => {
    const found = lContent.match(findRe);
    if (!found) return null;
    // Line content matches findRe
    return found.map(link => ({ file, lineNum, link }));
  }).filter(ent => !!ent).flat();
}

async function visitUrls (linkInfo) {
  return await Promise.all(linkInfo.map(async li => {
    const { file, lineNum, link } = li;
    try {
      const resp = await axios.get(link);
      return { file, lineNum, link, status: resp.status === 200 };
    } catch (err) {
      return { file, lineNum, link, status: false, err: err.message };
    }
  }));
}

function displayUrls (linkInfo, errorOnly) {
  linkInfo.forEach(ls => {
    const { file, lineNum, link, status = null, err } = ls;
    if (status && errorOnly) return;

    let display = `${file}:${lineNum}: ${link}`;
    if (status !== null) display += `, ${err ? `${status}, ${err}` : status}`;
    console.log(display);
  });
}

program
  .command('find <find-regex>')
  .description('finding lines that fit the specified regex in path')
  .usage('<find-regex> [options] <path>')
  .arguments('<path>')
  .option('-i, --insensitive', 'regex to be matched with case-insensitive', false)
  .option('-d, --dry-run', 'use with replace flag, output the changes on display and no files are overwritten', false)
  .option('-r, --replace <repl-regex>', 'replace the matched strings with `repl-regex` to files in-place')
  .action((findRegexStr, path, options, command) => {
    const { insensitive, replace: replRegexStr, dryRun } = options;

    console.log(`path: ${path}`);
    console.log(`findRegex: ${findRegexStr}, case-insensitive: ${insensitive}`);
    if (replRegexStr) console.log(`replRegex: ${replRegexStr}, dry-run: ${dryRun}`);

    glob(`${path}/**/*`, {}, (err, files) => {
      if (err) return console.log('find error:', err.stack);
      // We only process files
      const filtered = files.filter(f => fs.lstatSync(f).isFile());
      // The heavy-weight is done here
      filtered.forEach(fp => findRegex(fp, findRegexStr, replRegexStr, insensitive, dryRun));
    });
  });

program
  .command('url')
  .description('finding all URLs in path')
  .arguments('<path>')
  .option('-v, --visit', 'attempting to visit each link found and report back', false)
  .option('-e, --error-only', 'use with visit flag, only display URLs returning non-200 status code', false)
  .action((path, options, command) => {
    const { visit, errorOnly } = options;

    console.log(`path: ${path}, visit: ${visit}, errorOnly: ${errorOnly}`);

    glob(`${path}/**/*`, {}, async (err, files) => {
      if (err) return console.log('url error:', err.stack);

      let linkInfo = await Promise.all(files
        .filter(f => fs.lstatSync(f).isFile()) // only process files
        .map(f => findUrls(f))); // extractng links out of a file
      linkInfo = linkInfo.flat();
      if (visit) linkInfo = await visitUrls(linkInfo);
      displayUrls(linkInfo, errorOnly);
    });
  });

program
  .version('1.0.0')
  .parse(process.argv);
