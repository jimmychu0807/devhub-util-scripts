#!/usr/bin/env node
'use strict';

const { program } = require('commander');
const fs = require('fs');
const fsPromises = fs.promises;
const os = require('os');
const glob = require('glob');

async function findRegex (fp, findRegexStr, replRegexStr, insensitive, dryRun) {
  // Dealing with a single file
  const fContent = await fsPromises.readFile(fp, 'utf8');
  // buffer to write out, if replRegexStr is specified
  const fBuffer = [];
  // The regex to match
  const findRe = insensitive ? new RegExp(findRegexStr, 'i') : new RegExp(findRegexStr);
  // flag shortcut to represent if we actually need to writeout to a file
  const bWriteOut = replRegexStr && !dryRun;

  fContent.split(/\r?\n/).forEach((lContent, lNum) => {
    if (!findRe.test(lContent)) {
      // no match of `findRe`
      if (bWriteOut) fBuffer.push(lContent);
      return;
    }
    // Line content matches findRe
    console.log(`${fp}:${lNum}: ${lContent}`);

    const newLContent = replRegexStr ? lContent.replace(findRe, replRegexStr) : lContent;
    if (dryRun) console.log(`  â†³ ${newLContent}`);
    if (bWriteOut) fBuffer.push(newLContent);
  });

  // write back to the filepath if replacement is needed
  if (bWriteOut) fsPromises.writeFile(fp, fBuffer.join(os.EOL));
}

function findUrl (visit, path) {

}

program
  .command('find <find-regex>')
  .description('finding lines that fit the specified regex in path')
  .usage('<find-regex> [options] <path>')
  .arguments('<path>')
  .option('-i, --insensitive', 'regex to be matched with case-insensitive', false)
  .option('-d, --dry-run', 'use with replace flag, output the changes on display and no files are overwritten', false)
  .option('-r, --replace <repl-regex>', 'replace the matched strings with `repl-regex` to files in-place')
  .action((findRegexStr, path, options, command) => {
    const { insensitive, replace: replRegexStr, dryRun } = options;

    console.log(`findRegex: ${findRegexStr}`);
    if (replRegexStr) console.log(`replRegex: ${replRegexStr}`);
    if (replRegexStr) console.log(`dryRun: ${dryRun}`);
    console.log(`insensitive: ${insensitive}`);
    console.log(`path: ${path}`);

    glob(`${path}/**/*`, {}, (err, files) => {
      if (err) return console.log('findRegex error:', err.stack);
      // We only process files
      const filtered = files.filter(f => fs.lstatSync(f).isFile());
      // The heavy-weight is done here
      filtered.forEach(fp => findRegex(fp, findRegexStr, replRegexStr, insensitive, dryRun));
    });
  });

program
  .command('url')
  .description('finding all URLs in path')
  .arguments('<path>')
  .option('-v, --visit', 'attempting to visit each link found and report back')
  .action((path, options, command) => {
    const visit = options.visit || false;

    console.log(`Command name: ${command.name()}`);
    console.log(`visit: ${visit}`);
    console.log(`path: ${path}`);

    findUrl(visit, path);
  });

program
  .version('1.0.0')
  .parse(process.argv);
